{"id":"2JD8AHT8M","name":"GraphFrames","paragraphs":[{"text":"import org.graphframes._\n\nsc.setCheckpointDir(\"/tmp\")","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:52:55 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.graphframes._\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696303_1136762757","id":"paragraph_1661078456851_734211070","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:52:55 AM","dateFinished":"Oct 23, 2023, 11:52:55 AM","status":"FINISHED","focus":true,"$$hashKey":"object:13802"},{"text":"%md\n# Creating GraphFrames\n\nUsers can create GraphFrames from vertex and edge DataFrames.\n\n* Vertex DataFrame: A vertex DataFrame should contain a special column named “id” which specifies unique IDs for each vertex in the graph.\n* Edge DataFrame: An edge DataFrame should contain two special columns: “src” (source vertex ID of edge) and “dst” (destination vertex ID of edge).\n\nBoth DataFrames can have arbitrary other columns. Those columns can represent vertex and edge attributes.\n\nA GraphFrame can also be constructed from a single DataFrame containing edge information. The vertices will be inferred from the sources and destinations of the edges.\n\nThe following example demonstrates how to create a GraphFrame from vertex and edge DataFrames. ","user":"anonymous","dateUpdated":"2023-10-23T11:35:47+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Creating GraphFrames</h1>\n<p>Users can create GraphFrames from vertex and edge DataFrames.</p>\n<ul>\n<li>Vertex DataFrame: A vertex DataFrame should contain a special column named “id” which specifies unique IDs for each vertex in the graph.</li>\n<li>Edge DataFrame: An edge DataFrame should contain two special columns: “src” (source vertex ID of edge) and “dst” (destination vertex ID of edge).</li>\n</ul>\n<p>Both DataFrames can have arbitrary other columns. Those columns can represent vertex and edge attributes.</p>\n<p>A GraphFrame can also be constructed from a single DataFrame containing edge information. The vertices will be inferred from the sources and destinations of the edges.</p>\n<p>The following example demonstrates how to create a GraphFrame from vertex and edge DataFrames.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696304_1076787265","id":"paragraph_1661079056513_32502229","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:35:47+0300","dateFinished":"2023-10-23T11:35:47+0300","status":"FINISHED","$$hashKey":"object:13803"},{"text":"// Vertex DataFrame\nval v = spark.createDataFrame(List(\n  (\"a\", \"Alice\", 34),\n  (\"b\", \"Bob\", 36),\n  (\"c\", \"Charlie\", 30),\n  (\"d\", \"David\", 29),\n  (\"e\", \"Esther\", 32),\n  (\"f\", \"Fanny\", 36),\n  (\"g\", \"Gabby\", 60)\n)).toDF(\"id\", \"name\", \"age\")\n\n// Edge DataFrame\nval e = spark.createDataFrame(List(\n  (\"a\", \"b\", \"friend\"),\n  (\"b\", \"c\", \"follow\"),\n  (\"c\", \"b\", \"follow\"),\n  (\"f\", \"c\", \"follow\"),\n  (\"e\", \"f\", \"follow\"),\n  (\"e\", \"d\", \"friend\"),\n  (\"d\", \"a\", \"friend\"),\n  (\"a\", \"e\", \"friend\")\n)).toDF(\"src\", \"dst\", \"relationship\")\n\n// Create a GraphFrame\nval g = GraphFrame(v, e)","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:52:59 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mv\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 1 more field]\n\u001b[1m\u001b[34me\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [src: string, dst: string ... 1 more field]\n\u001b[1m\u001b[34mg\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696304_155432840","id":"paragraph_1661078466406_2068008628","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:52:59 AM","dateFinished":"Oct 23, 2023, 11:52:59 AM","status":"FINISHED","$$hashKey":"object:13804"},{"text":"%md\nThe GraphFrame constructed above is available in the GraphFrames package:","user":"anonymous","dateUpdated":"2023-10-23T11:36:07+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The GraphFrame constructed above is available in the GraphFrames package:</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696305_1345086083","id":"paragraph_1661080233439_1789555500","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:36:07+0300","dateFinished":"2023-10-23T11:36:07+0300","status":"FINISHED","$$hashKey":"object:13805"},{"text":"val g: GraphFrame = examples.Graphs.friends","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:02 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mg\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696305_1513226061","id":"paragraph_1661080240808_2066213120","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:02 AM","dateFinished":"Oct 23, 2023, 11:53:03 AM","status":"FINISHED","$$hashKey":"object:13806"},{"text":"%md\n# Basic graph and DataFrame queries\n\nGraphFrames provide several simple graph queries, such as node degree.\n\nAlso, since GraphFrames represent graphs as pairs of vertex and edge DataFrames, it is easy to make powerful queries directly on the vertex and edge DataFrames. Those DataFrames are made available as vertices and edges fields in the GraphFrame.","user":"anonymous","dateUpdated":"2023-10-23T11:36:20+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Basic graph and DataFrame queries</h1>\n<p>GraphFrames provide several simple graph queries, such as node degree.</p>\n<p>Also, since GraphFrames represent graphs as pairs of vertex and edge DataFrames, it is easy to make powerful queries directly on the vertex and edge DataFrames. Those DataFrames are made available as vertices and edges fields in the GraphFrame.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696305_216740669","id":"paragraph_1661078823372_977718370","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:36:20+0300","dateFinished":"2023-10-23T11:36:20+0300","status":"FINISHED","$$hashKey":"object:13807"},{"text":"// Display the vertex and edge DataFrames\ng.vertices.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:05 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+---+\n| id|   name|age|\n+---+-------+---+\n|  a|  Alice| 34|\n|  b|    Bob| 36|\n|  c|Charlie| 30|\n|  d|  David| 29|\n|  e| Esther| 32|\n|  f|  Fanny| 36|\n|  g|  Gabby| 60|\n+---+-------+---+\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696305_1216467835","id":"paragraph_1661079082186_1152371068","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:05 AM","dateFinished":"Oct 23, 2023, 11:53:05 AM","status":"FINISHED","$$hashKey":"object:13808"},{"id":"paragraph_1698170731134_1610186717","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"text":"g.vertices","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:05:31 PM","progress":0,"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698170731134_1610186717","dateCreated":"Oct 24, 2023, 9:05:31 PM","status":"READY","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres20\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 1 more field]\n"}]}},{"text":"g.edges.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:08 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+------------+\n|src|dst|relationship|\n+---+---+------------+\n|  a|  b|      friend|\n|  b|  c|      follow|\n|  c|  b|      follow|\n|  f|  c|      follow|\n|  e|  f|      follow|\n|  e|  d|      friend|\n|  d|  a|      friend|\n|  a|  e|      friend|\n+---+---+------------+\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696305_330823368","id":"paragraph_1661079106741_1371684048","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:08 AM","dateFinished":"Oct 23, 2023, 11:53:08 AM","status":"FINISHED","$$hashKey":"object:13809"},{"text":"// Get a DataFrame with columns \"id\" and \"inDeg\" (in-degree)\nval vertexInDegrees = g.inDegrees\nvertexInDegrees.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:11 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+--------+\n| id|inDegree|\n+---+--------+\n|  b|       2|\n|  c|       2|\n|  f|       1|\n|  d|       1|\n|  a|       1|\n|  e|       1|\n+---+--------+\n\n\u001b[1m\u001b[34mvertexInDegrees\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, inDegree: int]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1234"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1235"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696306_1283444461","id":"paragraph_1661079156005_1880432732","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:11 AM","dateFinished":"Oct 23, 2023, 11:53:11 AM","status":"FINISHED","$$hashKey":"object:13810"},{"text":"// Find the youngest user's age in the graph.\n// This queries the vertex DataFrame.\ng.vertices.groupBy().min(\"age\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:14 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+\n|min(age)|\n+--------+\n|      29|\n+--------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1236"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1237"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696306_1750927297","id":"paragraph_1661079189608_1655300916","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:14 AM","dateFinished":"Oct 23, 2023, 11:53:14 AM","status":"FINISHED","$$hashKey":"object:13811"},{"text":"// Count the number of \"follows\" in the graph.\n// This queries the edge DataFrame.\nval numFollows = g.edges.filter(\"relationship = 'follow'\").count()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:17 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mnumFollows\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 4\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1238"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1239"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696306_511227595","id":"paragraph_1661079198418_1347332705","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:17 AM","dateFinished":"Oct 23, 2023, 11:53:17 AM","status":"FINISHED","$$hashKey":"object:13812"},{"text":"%md\n# Motif finding\n\nMotif finding refers to searching for structural patterns in a graph.\n\nGraphFrame motif finding uses a simple Domain-Specific Language (DSL) for expressing structural queries. For example, graph.find(\"(a)-[e]->(b); (b)-[e2]->(a)\") will search for pairs of vertices a,b connected by edges in both directions. It will return a DataFrame of all such structures in the graph, with columns for each of the named elements (vertices or edges) in the motif. In this case, the returned columns will be “a, b, e, e2.”\n\nDSL for expressing structural patterns:\n\n* The basic unit of a pattern is an edge. For example, \"(a)-[e]->(b)\" expresses an edge e from vertex a to vertex b. Note that vertices are denoted by parentheses (a), while edges are denoted by square brackets [e].\n* A pattern is expressed as a union of edges. Edge patterns can be joined with semicolons. Motif \"(a)-[e]->(b); (b)-[e2]->(c)\" specifies two edges from a to b to c.\n* Within a pattern, names can be assigned to vertices and edges. For example, \"(a)-[e]->(b)\" has three named elements: vertices a,b and edge e. These names serve two purposes:\n    - The names can identify common elements among edges. For example, \"(a)-[e]->(b); (b)-[e2]->(c)\" specifies that the same vertex b is the destination of edge e and source of edge e2.\n    - The names are used as column names in the result DataFrame. If a motif contains named vertex a, then the result DataFrame will contain a column “a” which is a StructType with sub-fields equivalent to the schema (columns) of GraphFrame.vertices. Similarly, an edge e in a motif will produce a column “e” in the result DataFrame with sub-fields equivalent to the schema (columns) of GraphFrame.edges.\n    - Be aware that names do not identify distinct elements: two elements with different names may refer to the same graph element. For example, in the motif \"(a)-[e]->(b); (b)-[e2]->(c)\", the names a and c could refer to the same vertex. To restrict named elements to be distinct vertices or edges, use post-hoc filters such as resultDataframe.filter(\"a.id != c.id\").\n* It is acceptable to omit names for vertices or edges in motifs when not needed. E.g., \"(a)-[]->(b)\" expresses an edge between vertices a,b but does not assign a name to the edge. There will be no column for the anonymous edge in the result DataFrame. Similarly, \"(a)-[e]->()\" indicates an out-edge of vertex a but does not name the destination vertex. These are called anonymous vertices and edges.\n* An edge can be negated to indicate that the edge should not be present in the graph. E.g., \"(a)-[]->(b); !(b)-[]->(a)\" finds edges from a to b for which there is no edge from b to a.\n\nRestrictions:\n\n* Motifs are not allowed to contain edges without any named elements: \"()-[]->()\" and \"!()-[]->()\" are prohibited terms.\n* Motifs are not allowed to contain named edges within negated terms (since these named edges would never appear within results). E.g., \"!(a)-[ab]->(b)\" is invalid, but \"!(a)-[]->(b)\" is valid.\n\nMore complex queries, such as queries which operate on vertex or edge attributes, can be expressed by applying filters to the result DataFrame.\n\nThis can return duplicate rows. E.g., a query \"(u)-[]->()\" will return a result for each matching edge, even if those edges share the same vertex u.","user":"anonymous","dateUpdated":"2023-10-23T11:36:45+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Motif finding</h1>\n<p>Motif finding refers to searching for structural patterns in a graph.</p>\n<p>GraphFrame motif finding uses a simple Domain-Specific Language (DSL) for expressing structural queries. For example, graph.find(&ldquo;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(a)&rdquo;) will search for pairs of vertices a,b connected by edges in both directions. It will return a DataFrame of all such structures in the graph, with columns for each of the named elements (vertices or edges) in the motif. In this case, the returned columns will be “a, b, e, e2.”</p>\n<p>DSL for expressing structural patterns:</p>\n<ul>\n<li>The basic unit of a pattern is an edge. For example, &ldquo;(a)-[e]-&gt;(b)&rdquo; expresses an edge e from vertex a to vertex b. Note that vertices are denoted by parentheses (a), while edges are denoted by square brackets [e].</li>\n<li>A pattern is expressed as a union of edges. Edge patterns can be joined with semicolons. Motif &ldquo;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(c)&rdquo; specifies two edges from a to b to c.</li>\n<li>Within a pattern, names can be assigned to vertices and edges. For example, &ldquo;(a)-[e]-&gt;(b)&rdquo; has three named elements: vertices a,b and edge e. These names serve two purposes:\n<ul>\n<li>The names can identify common elements among edges. For example, &ldquo;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(c)&rdquo; specifies that the same vertex b is the destination of edge e and source of edge e2.</li>\n<li>The names are used as column names in the result DataFrame. If a motif contains named vertex a, then the result DataFrame will contain a column “a” which is a StructType with sub-fields equivalent to the schema (columns) of GraphFrame.vertices. Similarly, an edge e in a motif will produce a column “e” in the result DataFrame with sub-fields equivalent to the schema (columns) of GraphFrame.edges.</li>\n<li>Be aware that names do not identify distinct elements: two elements with different names may refer to the same graph element. For example, in the motif &ldquo;(a)-[e]-&gt;(b); (b)-[e2]-&gt;(c)&rdquo;, the names a and c could refer to the same vertex. To restrict named elements to be distinct vertices or edges, use post-hoc filters such as resultDataframe.filter(&ldquo;a.id != c.id&rdquo;).</li>\n</ul>\n</li>\n<li>It is acceptable to omit names for vertices or edges in motifs when not needed. E.g., &ldquo;(a)-[]-&gt;(b)&rdquo; expresses an edge between vertices a,b but does not assign a name to the edge. There will be no column for the anonymous edge in the result DataFrame. Similarly, &ldquo;(a)-[e]-&gt;()&rdquo; indicates an out-edge of vertex a but does not name the destination vertex. These are called anonymous vertices and edges.</li>\n<li>An edge can be negated to indicate that the edge should not be present in the graph. E.g., &ldquo;(a)-[]-&gt;(b); !(b)-[]-&gt;(a)&rdquo; finds edges from a to b for which there is no edge from b to a.</li>\n</ul>\n<p>Restrictions:</p>\n<ul>\n<li>Motifs are not allowed to contain edges without any named elements: &ldquo;()-[]-&gt;()&rdquo; and &ldquo;!()-[]-&gt;()&rdquo; are prohibited terms.</li>\n<li>Motifs are not allowed to contain named edges within negated terms (since these named edges would never appear within results). E.g., &ldquo;!(a)-[ab]-&gt;(b)&rdquo; is invalid, but &ldquo;!(a)-[]-&gt;(b)&rdquo; is valid.</li>\n</ul>\n<p>More complex queries, such as queries which operate on vertex or edge attributes, can be expressed by applying filters to the result DataFrame.</p>\n<p>This can return duplicate rows. E.g., a query &ldquo;(u)-[]-&gt;()&rdquo; will return a result for each matching edge, even if those edges share the same vertex u.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696306_481016670","id":"paragraph_1661079268862_903759557","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:36:45+0300","dateFinished":"2023-10-23T11:36:45+0300","status":"FINISHED","$$hashKey":"object:13813"},{"text":"// Search for pairs of vertices with edges in both directions between them.\nval motifs = g.find(\"(a)-[e]->(b); (b)-[e2]->(a)\")\nmotifs.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:21 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------+--------------+----------------+--------------+\n|               a|             e|               b|            e2|\n+----------------+--------------+----------------+--------------+\n|    {b, Bob, 36}|{b, c, follow}|{c, Charlie, 30}|{c, b, follow}|\n|{c, Charlie, 30}|{c, b, follow}|    {b, Bob, 36}|{b, c, follow}|\n+----------------+--------------+----------------+--------------+\n\n\u001b[1m\u001b[34mmotifs\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [a: struct<id: string, name: string ... 1 more field>, e: struct<src: string, dst: string ... 1 more field> ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1240"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1241"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1242"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1243"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1244"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696307_508446677","id":"paragraph_1661079336266_1733008396","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:21 AM","dateFinished":"Oct 23, 2023, 11:53:21 AM","status":"FINISHED","$$hashKey":"object:13814"},{"text":"%md\nMany motif queries are stateless and simple to express, as in the examples above. The next examples demonstrate more complex queries which carry state along a path in the motif. These queries can be expressed by combining GraphFrame motif finding with filters on the result, where the filters use sequence operations to construct a series of DataFrame Columns.\n\nFor example, suppose one wishes to identify a chain of 4 vertices with some property defined by a sequence of functions. That is, among chains of 4 vertices a->b->c->d, identify the subset of chains matching this complex filter:\n\n* Initialize state on path.\n* Update state based on vertex a.\n* Update state based on vertex b.\n* Etc. for c and d.\n* If final state matches some condition, then the chain is accepted by the filter.\n\nThe below code snippets demonstrate this process, where we identify chains of 4 vertices such that at least 2 of the 3 edges are “friend” relationships. In this example, the state is the current count of “friend” edges; in general, it could be any DataFrame Column.","user":"anonymous","dateUpdated":"2023-10-23T11:37:00+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Many motif queries are stateless and simple to express, as in the examples above. The next examples demonstrate more complex queries which carry state along a path in the motif. These queries can be expressed by combining GraphFrame motif finding with filters on the result, where the filters use sequence operations to construct a series of DataFrame Columns.</p>\n<p>For example, suppose one wishes to identify a chain of 4 vertices with some property defined by a sequence of functions. That is, among chains of 4 vertices a-&gt;b-&gt;c-&gt;d, identify the subset of chains matching this complex filter:</p>\n<ul>\n<li>Initialize state on path.</li>\n<li>Update state based on vertex a.</li>\n<li>Update state based on vertex b.</li>\n<li>Etc. for c and d.</li>\n<li>If final state matches some condition, then the chain is accepted by the filter.</li>\n</ul>\n<p>The below code snippets demonstrate this process, where we identify chains of 4 vertices such that at least 2 of the 3 edges are “friend” relationships. In this example, the state is the current count of “friend” edges; in general, it could be any DataFrame Column.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696307_591853029","id":"paragraph_1661080438025_225264804","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:00+0300","dateFinished":"2023-10-23T11:37:00+0300","status":"FINISHED","$$hashKey":"object:13815"},{"text":"// More complex queries can be expressed by applying filters.\nmotifs.filter(\"b.age > 30\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:24 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------+--------------+------------+--------------+\n|               a|             e|           b|            e2|\n+----------------+--------------+------------+--------------+\n|{c, Charlie, 30}|{c, b, follow}|{b, Bob, 36}|{b, c, follow}|\n+----------------+--------------+------------+--------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1245"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1246"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1247"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1248"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1249"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1250"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696308_1521641611","id":"paragraph_1661079396356_1100352779","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:24 AM","dateFinished":"Oct 23, 2023, 11:53:24 AM","status":"FINISHED","$$hashKey":"object:13816"},{"text":"import org.apache.spark.sql.Column\nimport org.apache.spark.sql.functions.{col, when}\n\n// Find chains of 4 vertices.\nval chain4 = g.find(\"(a)-[ab]->(b); (b)-[bc]->(c); (c)-[cd]->(d)\")\n\n// Query on sequence, with state (cnt)\n//  (a) Define method for updating state given the next element of the motif.\ndef sumFriends(cnt: Column, relationship: Column): Column = {\n  when(relationship === \"friend\", cnt + 1).otherwise(cnt)\n}\n\n//  (b) Use sequence operation to apply method to sequence of elements in motif.\n//      In this case, the elements are the 3 edges.\nval condition = { Seq(\"ab\", \"bc\", \"cd\")\n  .foldLeft(lit(0))((cnt, e) => sumFriends(cnt, col(e)(\"relationship\"))) }\n\n//  (c) Apply filter to DataFrame.\nval chainWith2Friends2 = chain4.where(condition >= 2)\nchainWith2Friends2.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:27 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+--------------+---------------+--------------+---------------+--------------+----------------+\n|              a|            ab|              b|            bc|              c|            cd|               d|\n+---------------+--------------+---------------+--------------+---------------+--------------+----------------+\n|{e, Esther, 32}|{e, d, friend}| {d, David, 29}|{d, a, friend}| {a, Alice, 34}|{a, e, friend}| {e, Esther, 32}|\n|{e, Esther, 32}|{e, d, friend}| {d, David, 29}|{d, a, friend}| {a, Alice, 34}|{a, b, friend}|    {b, Bob, 36}|\n| {d, David, 29}|{d, a, friend}| {a, Alice, 34}|{a, e, friend}|{e, Esther, 32}|{e, d, friend}|  {d, David, 29}|\n| {d, David, 29}|{d, a, friend}| {a, Alice, 34}|{a, e, friend}|{e, Esther, 32}|{e, f, follow}|  {f, Fanny, 36}|\n| {d, David, 29}|{d, a, friend}| {a, Alice, 34}|{a, b, friend}|   {b, Bob, 36}|{b, c, follow}|{c, Charlie, 30}|\n| {a, Alice, 34}|{a, e, friend}|{e, Esther, 32}|{e, d, friend}| {d, David, 29}|{d, a, friend}|  {a, Alice, 34}|\n+---------------+--------------+---------------+--------------+---------------+--------------+----------------+\n\nimport org.apache.spark.sql.Column\nimport org.apache.spark.sql.functions.{col, when}\n\u001b[1m\u001b[34mchain4\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [a: struct<id: string, name: string ... 1 more field>, ab: struct<src: string, dst: string ... 1 more field> ... 5 more fields]\n\u001b[1m\u001b[34msumFriends\u001b[0m: \u001b[1m\u001b[32m(cnt: org.apache.spark.sql.Column, relationship: org.apache.spark.sql.Column)org.apache.spark.sql.Column\u001b[0m\n\u001b[1m\u001b[34mcondition\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Column\u001b[0m = CASE WHEN (cd[relationship] = friend) THEN (CASE WHEN (bc[relationship] = friend) THEN (CASE WHEN (ab[relationship] = friend) THEN (0 + 1) ELSE 0 END + 1) ELSE CASE WHEN (ab[relationship] = friend) THEN (0 + 1) ELSE 0 END END + 1) ELSE CASE WHEN (bc[relationship] = friend) THEN (CASE WHEN (ab[relationship]...\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1252"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1251"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1253"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1254"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1255"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696308_372333109","id":"paragraph_1661079434697_855260781","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:27 AM","dateFinished":"Oct 23, 2023, 11:53:28 AM","status":"FINISHED","$$hashKey":"object:13817"},{"text":"%md\nThe above example demonstrated a stateful motif for a fixed-length chain. Currently, in order to search for variable-length motifs, users need to run one query for each possible length. However, the above query patterns allow users to re-use the same code for each length, with the only change being to update the sequence of motif elements (“ab”, “bc”, “cd” above).","user":"anonymous","dateUpdated":"2023-10-23T11:37:15+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The above example demonstrated a stateful motif for a fixed-length chain. Currently, in order to search for variable-length motifs, users need to run one query for each possible length. However, the above query patterns allow users to re-use the same code for each length, with the only change being to update the sequence of motif elements (“ab”, “bc”, “cd” above).</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696308_1403579177","id":"paragraph_1661080479964_1230384211","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:15+0300","dateFinished":"2023-10-23T11:37:15+0300","status":"FINISHED","$$hashKey":"object:13818"},{"text":"%md\n# Subgraphs\n\nIn GraphX, the subgraph() method takes an edge triplet (edge, src vertex, and dst vertex, plus attributes) and allows the user to select a subgraph based on triplet and vertex filters.\n\nGraphFrames provide an even more powerful way to select subgraphs based on a combination of motif finding and DataFrame filters. We provide three helper methods for subgraph selection. filterVertices(condition), filterEdges(condition), and dropIsolatedVertices().","user":"anonymous","dateUpdated":"2023-10-23T11:37:24+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Subgraphs</h1>\n<p>In GraphX, the subgraph() method takes an edge triplet (edge, src vertex, and dst vertex, plus attributes) and allows the user to select a subgraph based on triplet and vertex filters.</p>\n<p>GraphFrames provide an even more powerful way to select subgraphs based on a combination of motif finding and DataFrame filters. We provide three helper methods for subgraph selection. filterVertices(condition), filterEdges(condition), and dropIsolatedVertices().</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696308_246016597","id":"paragraph_1661079494782_814469603","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:24+0300","dateFinished":"2023-10-23T11:37:24+0300","status":"FINISHED","$$hashKey":"object:13819"},{"text":"%md\n**Simple subgraph: vertex and edge filters:** The following example shows how to select a subgraph based upon vertex and edge filters.","user":"anonymous","dateUpdated":"2023-10-23T11:37:33+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Simple subgraph: vertex and edge filters:</strong> The following example shows how to select a subgraph based upon vertex and edge filters.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696309_2128936139","id":"paragraph_1661079619669_1259075502","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:33+0300","dateFinished":"2023-10-23T11:37:33+0300","status":"FINISHED","$$hashKey":"object:13820"},{"text":"// Select subgraph of users older than 30, and relationships of type \"friend\".\n// Drop isolated vertices (users) which are not contained in any edges (relationships).\n\nval g1 = g.filterVertices(\"age > 30\").filterEdges(\"relationship = 'friend'\").dropIsolatedVertices()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:35 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mg1\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696309_1316261559","id":"paragraph_1661079561234_1167408710","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:35 AM","dateFinished":"Oct 23, 2023, 11:53:35 AM","status":"FINISHED","$$hashKey":"object:13821"},{"text":"%md\n**Complex subgraph: triplet filters:** The following example shows how to select a subgraph based upon triplet filters which operate on an edge and its src and dst vertices. This example could be extended to go beyond triplets by using more complex motifs.","user":"anonymous","dateUpdated":"2023-10-23T11:37:44+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Complex subgraph: triplet filters:</strong> The following example shows how to select a subgraph based upon triplet filters which operate on an edge and its src and dst vertices. This example could be extended to go beyond triplets by using more complex motifs.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696309_1697787841","id":"paragraph_1661079574963_1899555761","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:44+0300","dateFinished":"2023-10-23T11:37:44+0300","status":"FINISHED","$$hashKey":"object:13822"},{"text":"// Select subgraph based on edges \"e\" of type \"follow\"\n// pointing from a younger user \"a\" to an older user \"b\".\nval paths = { g.find(\"(a)-[e]->(b)\")\n  .filter(\"e.relationship = 'follow'\")\n  .filter(\"a.age < b.age\") }\n  \n// \"paths\" contains vertex info. Extract the edges.\nval e2 = paths.select(\"e.src\", \"e.dst\", \"e.relationship\")\n\n// In Spark 1.5+, the user may simplify this call:\n//  val e2 = paths.select(\"e.*\")\n\n// Construct the subgraph\nval g2 = GraphFrame(g.vertices, e2)","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:38 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mpaths\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [a: struct<id: string, name: string ... 1 more field>, e: struct<src: string, dst: string ... 1 more field> ... 1 more field]\n\u001b[1m\u001b[34me2\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [src: string, dst: string ... 1 more field]\n\u001b[1m\u001b[34mg2\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696309_1755992969","id":"paragraph_1661079640936_372424853","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:38 AM","dateFinished":"Oct 23, 2023, 11:53:38 AM","status":"FINISHED","$$hashKey":"object:13823"},{"text":"%md\n# Graph algorithms\n\nGraphFrames provides the same suite of standard graph algorithms as GraphX, plus some new ones. We provide brief descriptions and code snippets below. See the API docs for more details.\n\nSome of the algorithms are currently wrappers around GraphX implementations, so they may not be more scalable than GraphX. More algorithms will be migrated to native GraphFrames implementations in the future.","user":"anonymous","dateUpdated":"2023-10-23T11:37:56+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Graph algorithms</h1>\n<p>GraphFrames provides the same suite of standard graph algorithms as GraphX, plus some new ones. We provide brief descriptions and code snippets below. See the API docs for more details.</p>\n<p>Some of the algorithms are currently wrappers around GraphX implementations, so they may not be more scalable than GraphX. More algorithms will be migrated to native GraphFrames implementations in the future.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696309_1490207932","id":"paragraph_1661079719180_1876369053","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:37:56+0300","dateFinished":"2023-10-23T11:37:56+0300","status":"FINISHED","$$hashKey":"object:13824"},{"text":"%md\n## Breadth-first search (BFS)\n\nBreadth-first search (BFS) finds the shortest path(s) from one vertex (or a set of vertices) to another vertex (or a set of vertices). The beginning and end vertices are specified as Spark DataFrame expressions.\n\nSee [Wikipedia on BFS](https://en.wikipedia.org/wiki/Breadth-first_search) for more background.\n\nThe following code snippets uses BFS to find path between vertex with name \"Esther\" to a vertex with age < 32.\n\nFor API details, refer to the API docs.","user":"anonymous","dateUpdated":"2023-10-23T11:38:06+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Breadth-first search (BFS)</h2>\n<p>Breadth-first search (BFS) finds the shortest path(s) from one vertex (or a set of vertices) to another vertex (or a set of vertices). The beginning and end vertices are specified as Spark DataFrame expressions.</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">Wikipedia on BFS</a> for more background.</p>\n<p>The following code snippets uses BFS to find path between vertex with name &ldquo;Esther&rdquo; to a vertex with age &lt; 32.</p>\n<p>For API details, refer to the API docs.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_1013027615","id":"paragraph_1661079785938_953327562","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:38:06+0300","dateFinished":"2023-10-23T11:38:06+0300","status":"FINISHED","$$hashKey":"object:13825"},{"text":"// Search from \"Esther\" for users of age < 32.\nval paths = g.bfs.fromExpr(\"name = 'Esther'\").toExpr(\"age < 32\").run()\npaths.show()","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:12:36 PM","progress":100,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+--------------+--------------+\n|           from|            e0|            to|\n+---------------+--------------+--------------+\n|{e, Esther, 32}|{e, d, friend}|{d, David, 29}|\n+---------------+--------------+--------------+\n\n\u001b[1m\u001b[34mpaths\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [from: struct<id: string, name: string ... 1 more field>, e0: struct<src: string, dst: string ... 1 more field> ... 1 more field]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=107"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=108"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=109"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=110"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=111"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=112"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=113"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=114"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=115"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=116"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=117"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=118"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=119"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=120"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=121"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=122"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=123"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=124"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=125"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=126"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_1131059625","id":"paragraph_1661079859266_108954637","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 24, 2023, 9:12:36 PM","dateFinished":"Oct 24, 2023, 9:12:37 PM","status":"FINISHED","$$hashKey":"object:13826"},{"id":"paragraph_1698171171442_2055234565","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"text":"// Specify edge filters or max path lengths.\n{ g.bfs.fromExpr(\"name = 'Esther'\").toExpr(\"age < 32\")\n  .edgeFilter(\"relationship != 'friend'\")\n  .maxPathLength(3).run() }.show()","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:12:57 PM","progress":100,"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=135"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=136"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=137"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=138"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=139"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=140"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=141"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=142"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=143"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=144"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=145"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=146"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698171171442_2055234565","dateCreated":"Oct 24, 2023, 9:12:51 PM","status":"FINISHED","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+--------------+--------------+--------------+----------------+\n|           from|            e0|            v1|            e1|              to|\n+---------------+--------------+--------------+--------------+----------------+\n|{e, Esther, 32}|{e, f, follow}|{f, Fanny, 36}|{f, c, follow}|{c, Charlie, 30}|\n+---------------+--------------+--------------+--------------+----------------+\n\n"}]},"dateStarted":"Oct 24, 2023, 9:12:57 PM","dateFinished":"Oct 24, 2023, 9:12:58 PM"},{"text":"%md\n## Connected components\n\nComputes the connected component membership of each vertex and returns a graph with each vertex assigned a component ID.\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/Connected_component_(graph_theory)) for background.\n\nNOTE: With GraphFrames 0.3.0 and later releases, the default Connected Components algorithm requires setting a Spark checkpoint directory. Users can revert to the old algorithm using ``connectedComponents.setAlgorithm(\"graphx\")``.","user":"anonymous","dateUpdated":"2023-10-23T11:38:18+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Connected components</h2>\n<p>Computes the connected component membership of each vertex and returns a graph with each vertex assigned a component ID.</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Connected_component_(graph_theory)\">Wikipedia</a> for background.</p>\n<p>NOTE: With GraphFrames 0.3.0 and later releases, the default Connected Components algorithm requires setting a Spark checkpoint directory. Users can revert to the old algorithm using <code>connectedComponents.setAlgorithm(&quot;graphx&quot;)</code>.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_681777756","id":"paragraph_1661079896666_539822853","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:38:18+0300","dateFinished":"2023-10-23T11:38:18+0300","status":"FINISHED","$$hashKey":"object:13827"},{"text":"val result = g.connectedComponents.run()\nresult.select(\"id\", \"component\").orderBy(\"component\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:46 AM","progress":100,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---------+\n| id|component|\n+---+---------+\n|  d|        0|\n|  b|        0|\n|  f|        0|\n|  e|        0|\n|  a|        0|\n|  c|        0|\n|  g|        6|\n+---+---------+\n\n\u001b[1m\u001b[34mresult\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1275"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1276"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1277"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1278"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1279"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1280"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1281"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1282"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1283"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1284"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1285"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1286"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1287"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1288"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1289"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1290"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1291"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1292"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_863871465","id":"paragraph_1661079928469_857307467","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:46 AM","dateFinished":"Oct 23, 2023, 11:53:51 AM","status":"FINISHED","$$hashKey":"object:13828"},{"text":"%md\n## Strongly connected components\n\nCompute the strongly connected component (SCC) of each vertex and return a graph with each vertex assigned to the SCC containing that vertex.\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/Strongly_connected_component) for background.","user":"anonymous","dateUpdated":"2023-10-23T11:42:00+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Strongly connected components</h2>\n<p>Compute the strongly connected component (SCC) of each vertex and return a graph with each vertex assigned to the SCC containing that vertex.</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">Wikipedia</a> for background.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_596979061","id":"paragraph_1661079956595_1477332102","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:42:00+0300","dateFinished":"2023-10-23T11:42:00+0300","status":"FINISHED","$$hashKey":"object:13829"},{"text":"val result = g.stronglyConnectedComponents.maxIter(10).run()\nresult.select(\"id\", \"component\").orderBy(\"component\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:53:54 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---------+\n| id|component|\n+---+---------+\n|  a|        0|\n|  d|        0|\n|  e|        0|\n|  c|        1|\n|  b|        1|\n|  f|        5|\n|  g|        6|\n+---+---------+\n\n\u001b[1m\u001b[34mresult\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1293"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1294"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1295"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1296"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1297"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1298"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1299"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1300"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1301"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1302"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1303"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1304"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1305"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1306"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1307"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1308"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1309"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1310"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1311"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1312"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1313"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1314"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1315"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1316"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1317"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1318"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1319"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1320"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1321"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1322"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1323"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1324"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1325"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1326"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1327"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1328"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1329"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1330"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1331"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1332"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1333"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1334"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1335"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1336"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1337"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1338"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1339"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1340"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1341"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1342"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1343"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1344"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1345"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1346"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1347"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1348"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1349"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1350"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1351"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1352"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1353"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1354"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1355"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696310_792214597","id":"paragraph_1661080092985_634767465","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:53:54 AM","dateFinished":"Oct 23, 2023, 11:53:57 AM","status":"FINISHED","$$hashKey":"object:13830"},{"text":"%md\n## Label Propagation Algorithm (LPA)\n\nRun static Label Propagation Algorithm for detecting communities in networks.\n\nEach node in the network is initially assigned to its own community. At every superstep, nodes send their community affiliation to all neighbors and update their state to the mode community affiliation of incoming messages.\n\nLPA is a standard community detection algorithm for graphs. It is very inexpensive computationally, although (1) convergence is not guaranteed and (2) one can end up with trivial solutions (all nodes are identified into a single community).\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/Label_Propagation_Algorithm) for background.","user":"anonymous","dateUpdated":"2023-10-23T11:42:17+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Label Propagation Algorithm (LPA)</h2>\n<p>Run static Label Propagation Algorithm for detecting communities in networks.</p>\n<p>Each node in the network is initially assigned to its own community. At every superstep, nodes send their community affiliation to all neighbors and update their state to the mode community affiliation of incoming messages.</p>\n<p>LPA is a standard community detection algorithm for graphs. It is very inexpensive computationally, although (1) convergence is not guaranteed and (2) one can end up with trivial solutions (all nodes are identified into a single community).</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Label_Propagation_Algorithm\">Wikipedia</a> for background.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_187676738","id":"paragraph_1661080106551_755532236","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:42:17+0300","dateFinished":"2023-10-23T11:42:17+0300","status":"FINISHED","$$hashKey":"object:13831"},{"text":"val result = g.labelPropagation.maxIter(5).run()\nresult.select(\"id\", \"label\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:54:01 AM","progress":11,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+\n| id|label|\n+---+-----+\n|  a|    2|\n|  b|    2|\n|  c|    1|\n|  d|    2|\n|  e|    5|\n|  f|    2|\n|  g|    6|\n+---+-----+\n\n\u001b[1m\u001b[34mresult\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1356"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1357"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1358"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1359"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1360"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1361"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1362"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1363"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1364"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1365"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1366"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_717719166","id":"paragraph_1661080136173_1002235700","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:54:01 AM","dateFinished":"Oct 23, 2023, 11:54:02 AM","status":"FINISHED","$$hashKey":"object:13832"},{"id":"paragraph_1698171561459_123110243","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+\n| id|label|\n+---+-----+\n|  a|    2|\n|  b|    1|\n|  c|    2|\n|  d|    2|\n|  e|    2|\n|  f|    2|\n|  g|    6|\n+---+-----+\n\n\u001b[1m\u001b[34mresult\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 2 more fields]\n"}]},"text":"val result = g.labelPropagation.maxIter(50).run()\nresult.select(\"id\", \"label\").show()","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:19:21 PM","progress":8,"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=282"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=283"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=284"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=285"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=286"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=287"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=288"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=289"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=290"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=291"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=292"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=293"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=294"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=295"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=296"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=297"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698171561459_123110243","dateCreated":"Oct 24, 2023, 9:19:21 PM","dateStarted":"Oct 24, 2023, 9:19:21 PM","dateFinished":"Oct 24, 2023, 9:19:22 PM","status":"FINISHED"},{"text":"%md\n## PageRank\n\nThere are two implementations of PageRank.\n\n* The first one uses the org.apache.spark.graphx.graph interface with aggregateMessages and runs PageRank for a fixed number of iterations. This can be executed by setting maxIter.\n* The second implementation uses the org.apache.spark.graphx.Pregel interface and runs PageRank until convergence and this can be run by setting tol.\n\nBoth implementations support non-personalized and personalized PageRank, where setting a sourceId personalizes the results for that vertex.\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/PageRank) for background.","user":"anonymous","dateUpdated":"2023-10-23T11:42:30+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>PageRank</h2>\n<p>There are two implementations of PageRank.</p>\n<ul>\n<li>The first one uses the org.apache.spark.graphx.graph interface with aggregateMessages and runs PageRank for a fixed number of iterations. This can be executed by setting maxIter.</li>\n<li>The second implementation uses the org.apache.spark.graphx.Pregel interface and runs PageRank until convergence and this can be run by setting tol.</li>\n</ul>\n<p>Both implementations support non-personalized and personalized PageRank, where setting a sourceId personalizes the results for that vertex.</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/PageRank\">Wikipedia</a> for background.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_2016116039","id":"paragraph_1661080842535_1904800827","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:42:30+0300","dateFinished":"2023-10-23T11:42:30+0300","status":"FINISHED","$$hashKey":"object:13833"},{"text":"// Run PageRank until convergence to tolerance \"tol\".\nval results = g.pageRank.resetProbability(0.15).tol(0.01).run()\n\n// Display resulting pageranks and final edge weights\n// Note that the displayed pagerank may be truncated, e.g., missing the E notation.\n// In Spark 1.5+, you can use show(truncate=false) to avoid truncation.\nresults.vertices.select(\"id\", \"pagerank\").show()\nresults.edges.select(\"src\", \"dst\", \"weight\").show()","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:21:41 PM","progress":1,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":85,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------------------+\n| id|           pagerank|\n+---+-------------------+\n|  a|0.44910633706538744|\n|  b|  2.655507832863289|\n|  c| 2.6878300011606218|\n|  d| 0.3283606792049851|\n|  e|0.37085233187676075|\n|  f| 0.3283606792049851|\n|  g| 0.1799821386239711|\n+---+-------------------+\n\n+---+---+------+\n|src|dst|weight|\n+---+---+------+\n|  a|  b|   0.5|\n|  a|  e|   0.5|\n|  b|  c|   1.0|\n|  c|  b|   1.0|\n|  d|  a|   1.0|\n|  e|  d|   0.5|\n|  e|  f|   0.5|\n|  f|  c|   1.0|\n+---+---+------+\n\n\u001b[1m\u001b[34mresults\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 2 more fields], e:[src: string, dst: string ... 2 more fields])\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=439"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=440"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=441"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=442"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=443"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=444"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=445"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=446"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=447"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=448"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=449"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=450"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=451"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=452"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=453"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=454"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=455"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=456"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=457"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=458"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=459"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=460"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=461"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=462"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=463"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=464"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=465"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=466"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=467"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=468"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=469"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=470"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=471"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=472"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=473"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=474"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=475"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=476"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=477"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=478"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=479"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=480"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=481"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=482"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=483"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=484"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=485"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=486"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=487"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=488"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=489"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=490"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=491"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=492"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_584605784","id":"paragraph_1661080892069_1555908410","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 24, 2023, 9:21:41 PM","dateFinished":"Oct 24, 2023, 9:21:44 PM","status":"FINISHED","$$hashKey":"object:13834"},{"text":"// Run PageRank for a fixed number of iterations.\nval results2 = g.pageRank.resetProbability(0.15).maxIter(10).run()\n\nresults2.vertices.show()\nresults2.edges.show()","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:22:20 PM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+---+-------------------+\n| id|   name|age|           pagerank|\n+---+-------+---+-------------------+\n|  a|  Alice| 34| 0.4485115093698443|\n|  b|    Bob| 36| 2.7025217677349773|\n|  c|Charlie| 30| 2.6667877057849627|\n|  d|  David| 29|0.32504910549694244|\n|  e| Esther| 32| 0.3613490987992571|\n|  f|  Fanny| 36|0.32504910549694244|\n|  g|  Gabby| 60|0.17073170731707318|\n+---+-------+---+-------------------+\n\n+---+---+------------+------+\n|src|dst|relationship|weight|\n+---+---+------------+------+\n|  a|  b|      friend|   0.5|\n|  a|  e|      friend|   0.5|\n|  b|  c|      follow|   1.0|\n|  c|  b|      follow|   1.0|\n|  d|  a|      friend|   1.0|\n|  e|  d|      friend|   0.5|\n|  e|  f|      follow|   0.5|\n|  f|  c|      follow|   1.0|\n+---+---+------------+------+\n\n\u001b[1m\u001b[34mresults2\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 2 more fields], e:[src: string, dst: string ... 2 more fields])\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=554"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=555"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=556"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=557"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=558"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=559"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=560"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=561"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=562"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=563"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=564"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=565"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=566"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=567"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=568"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=569"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=570"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=571"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=572"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_654218330","id":"paragraph_1661080907186_85522219","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 24, 2023, 9:22:20 PM","dateFinished":"Oct 24, 2023, 9:22:21 PM","status":"FINISHED","$$hashKey":"object:13835"},{"text":"// Run PageRank personalized for vertex \"a\"\nval results3 = g.pageRank.resetProbability(0.15).maxIter(10).sourceId(\"a\").run()\n\nresults3.vertices.show()\nresults3.edges.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:54:22 AM","progress":1,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+---+-------------------+\n| id|   name|age|           pagerank|\n+---+-------+---+-------------------+\n|  a|  Alice| 34| 0.1771083164268356|\n|  b|    Bob| 36|0.33661430397025677|\n|  c|Charlie| 30|0.34591470208468167|\n|  d|  David| 29| 0.0318921369727478|\n|  e| Esther| 32|0.07657840357273026|\n|  f|  Fanny| 36| 0.0318921369727478|\n|  g|  Gabby| 60|                0.0|\n+---+-------+---+-------------------+\n\n+---+---+------------+------+\n|src|dst|relationship|weight|\n+---+---+------------+------+\n|  a|  b|      friend|   0.5|\n|  a|  e|      friend|   0.5|\n|  b|  c|      follow|   1.0|\n|  c|  b|      follow|   1.0|\n|  d|  a|      friend|   1.0|\n|  e|  d|      friend|   0.5|\n|  e|  f|      follow|   0.5|\n|  f|  c|      follow|   1.0|\n+---+---+------------+------+\n\n\u001b[1m\u001b[34mresults3\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 2 more fields], e:[src: string, dst: string ... 2 more fields])\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1452"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1453"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1454"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1455"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1456"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1457"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1458"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1459"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1460"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1461"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1462"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1463"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1464"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1465"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1466"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1467"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1468"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1469"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1470"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1471"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1472"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1473"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1474"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1475"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1476"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696311_1631709984","id":"paragraph_1661080992195_822782862","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:54:22 AM","dateFinished":"Oct 23, 2023, 11:54:23 AM","status":"FINISHED","$$hashKey":"object:13836"},{"text":"// Run PageRank personalized for vertex [\"a\", \"b\", \"c\", \"d\"] in parallel\nval results4 = g.parallelPersonalizedPageRank.resetProbability(0.15).maxIter(10).sourceIds(Array(\"a\", \"b\", \"c\", \"d\")).run()\n\nresults4.vertices.show(false)\nresults4.edges.show(false)","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:23:14 PM","progress":4,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+---+---------------------------------------------------------------------------------------------+\n|id |name   |age|pageranks                                                                                    |\n+---+-------+---+---------------------------------------------------------------------------------------------+\n|a  |Alice  |34 |(4,[0,1,2,3],[0.19835686687503964,0.0,0.0,0.16108519510401345])                              |\n|b  |Bob    |36 |(4,[0,1,2,3],[0.28914633432104564,0.6309963479403321,0.36900365205966795,0.3353098683059196])|\n|c  |Charlie|30 |(4,[0,1,2,3],[0.3570167371682629,0.36900365205966795,0.6309963479403321,0.2217305676709321]) |\n|d  |David  |29 |(4,[0,1,2,3],[0.035718392537920036,0.0,0.0,0.1862765895809272])                              |\n|e  |Esther |32 |(4,[0,1,2,3],[0.08404327655981184,0.0,0.0,0.06708616093909306])                              |\n|f  |Fanny  |36 |(4,[0,1,2,3],[0.035718392537920036,0.0,0.0,0.028511618399114546])                            |\n|g  |Gabby  |60 |(4,[0,1,2,3],[0.0,0.0,0.0,0.0])                                                              |\n+---+-------+---+---------------------------------------------------------------------------------------------+\n\n+---+---+------------+------+\n|src|dst|relationship|weight|\n+---+---+------------+------+\n|a  |b  |friend      |0.5   |\n|a  |e  |friend      |0.5   |\n|b  |c  |follow      |1.0   |\n|c  |b  |follow      |1.0   |\n|d  |a  |friend      |1.0   |\n|e  |d  |friend      |0.5   |\n|e  |f  |follow      |0.5   |\n|f  |c  |follow      |1.0   |\n+---+---+------------+------+\n\n\u001b[1m\u001b[34mresults4\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 2 more fields], e:[src: string, dst: string ... 2 more fields])\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=653"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=654"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=655"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=656"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=657"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=658"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=659"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=660"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=661"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=662"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=663"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=664"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=665"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=666"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=667"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=668"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=669"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=670"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=671"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=672"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=673"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=674"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=675"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=676"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=677"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=678"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=679"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=680"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=681"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=682"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=683"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_387789714","id":"paragraph_1661081021283_947959304","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 24, 2023, 9:23:14 PM","dateFinished":"Oct 24, 2023, 9:23:15 PM","status":"FINISHED","$$hashKey":"object:13837"},{"text":"%md\n## Shortest paths\n\nComputes shortest paths from each vertex to the given set of landmark vertices, where landmarks are specified by vertex ID. Note that this takes edge direction into account.\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/Shortest_path_problem) for background.","user":"anonymous","dateUpdated":"2023-10-23T11:42:59+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Shortest paths</h2>\n<p>Computes shortest paths from each vertex to the given set of landmark vertices, where landmarks are specified by vertex ID. Note that this takes edge direction into account.</p>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Shortest_path_problem\">Wikipedia</a> for background.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_1893319215","id":"paragraph_1661081034449_1064589542","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:42:59+0300","dateFinished":"2023-10-23T11:42:59+0300","status":"FINISHED","$$hashKey":"object:13838"},{"text":"val results = g.shortestPaths.landmarks(Seq(\"a\", \"d\")).run()\nresults.select(\"id\", \"distances\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:54:31 AM","progress":2,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----------------+\n| id|       distances|\n+---+----------------+\n|  a|{d -> 2, a -> 0}|\n|  b|              {}|\n|  c|              {}|\n|  d|{d -> 0, a -> 1}|\n|  e|{d -> 1, a -> 2}|\n|  f|              {}|\n|  g|              {}|\n+---+----------------+\n\n\u001b[1m\u001b[34mresults\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1508"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1509"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1510"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1511"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1512"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1513"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1514"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1515"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1516"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1517"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1518"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1519"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1520"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1521"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1522"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_1551734989","id":"paragraph_1661081080723_776447113","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:54:31 AM","dateFinished":"Oct 23, 2023, 11:54:32 AM","status":"FINISHED","$$hashKey":"object:13839"},{"text":"%md\n## Triangle count\n\nComputes the number of triangles passing through each vertex.","user":"anonymous","dateUpdated":"2023-10-23T11:43:16+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Triangle count</h2>\n<p>Computes the number of triangles passing through each vertex.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_524242881","id":"paragraph_1661081095973_192371421","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:43:16+0300","dateFinished":"2023-10-23T11:43:16+0300","status":"FINISHED","$$hashKey":"object:13840"},{"text":"val results = g.triangleCount.run()\nresults.select(\"id\", \"count\").show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:54:36 AM","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+\n| id|count|\n+---+-----+\n|  a|    1|\n|  b|    0|\n|  c|    0|\n|  d|    1|\n|  e|    1|\n|  f|    0|\n|  g|    0|\n+---+-----+\n\n\u001b[1m\u001b[34mresults\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [count: bigint, id: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1523"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1524"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1525"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1526"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1527"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1528"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1529"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1530"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1531"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1532"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1533"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1534"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1535"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1536"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1537"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1538"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1539"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1540"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1541"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1542"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1543"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_1026674281","id":"paragraph_1661081246149_778689400","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:54:36 AM","dateFinished":"Oct 23, 2023, 11:54:38 AM","status":"FINISHED","$$hashKey":"object:13841"},{"text":"%md\n# Saving and loading GraphFrames\n\nSince GraphFrames are built around DataFrames, they automatically support saving and loading to and from the same set of datasources. Refer to the Spark SQL User Guide on datasources for more details.\n\nThe below example shows how to save and then load a graph.","user":"anonymous","dateUpdated":"2023-10-23T11:43:36+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Saving and loading GraphFrames</h1>\n<p>Since GraphFrames are built around DataFrames, they automatically support saving and loading to and from the same set of datasources. Refer to the Spark SQL User Guide on datasources for more details.</p>\n<p>The below example shows how to save and then load a graph.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696312_103346547","id":"paragraph_1661081257063_1858043698","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:43:36+0300","dateFinished":"2023-10-23T11:43:36+0300","status":"FINISHED","$$hashKey":"object:13842"},{"text":"import org.apache.hadoop.fs.Path\n\nval fs = org.apache.hadoop.fs.FileSystem.get(spark.sparkContext.hadoopConfiguration)\n\nval verticesPath = \"/tmp/vertices\"\nval edgesPath = \"/tmp/edges\"\n\nif (fs.exists(new org.apache.hadoop.fs.Path(verticesPath))) fs.delete(new Path(verticesPath), true)\nif (fs.exists(new org.apache.hadoop.fs.Path(edgesPath))) fs.delete(new Path(edgesPath), true)\n\n// Save vertices and edges as Parquet to some location.\ng.vertices.write.parquet(verticesPath)\ng.edges.write.parquet(edgesPath)\n\n// Load the vertices and edges back.\nval sameV = sqlContext.read.parquet(verticesPath)\nval sameE = sqlContext.read.parquet(edgesPath)\n\n// Create an identical GraphFrame.\nval sameG = GraphFrame(sameV, sameE)","user":"anonymous","dateUpdated":"Oct 24, 2023, 9:26:16 PM","progress":100,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.hadoop.fs.Path\n\u001b[1m\u001b[34mfs\u001b[0m: \u001b[1m\u001b[32morg.apache.hadoop.fs.FileSystem\u001b[0m = org.apache.hadoop.hive.ql.io.ProxyLocalFileSystem@223a2ced\n\u001b[1m\u001b[34mverticesPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /tmp/vertices\n\u001b[1m\u001b[34medgesPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /tmp/edges\n\u001b[1m\u001b[34msameV\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, name: string ... 1 more field]\n\u001b[1m\u001b[34msameE\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [src: string, dst: string ... 1 more field]\n\u001b[1m\u001b[34msameG\u001b[0m: \u001b[1m\u001b[32morg.graphframes.GraphFrame\u001b[0m = GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696313_1681161257","id":"paragraph_1661081337216_976359738","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 24, 2023, 9:26:16 PM","dateFinished":"Oct 24, 2023, 9:26:16 PM","status":"ERROR","$$hashKey":"object:13843"},{"text":"%md\n# Message passing via AggregateMessages\n\nLike GraphX, GraphFrames provides primitives for developing graph algorithms. The two key components are:\n\n* ``aggregateMessages``: Send messages between vertices, and aggregate messages for each vertex. GraphFrames provides a native aggregateMessages method implemented using DataFrame operations. This may be used analogously to the GraphX API.\n* ``joins``: Join message aggregates with the original graph. GraphFrames rely on DataFrame joins, which provide the full functionality of GraphX joins.\n\nThe below code snippets show how to use aggregateMessages to compute the sum of the ages of adjacent users.","user":"anonymous","dateUpdated":"2023-10-23T11:43:48+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Message passing via AggregateMessages</h1>\n<p>Like GraphX, GraphFrames provides primitives for developing graph algorithms. The two key components are:</p>\n<ul>\n<li><code>aggregateMessages</code>: Send messages between vertices, and aggregate messages for each vertex. GraphFrames provides a native aggregateMessages method implemented using DataFrame operations. This may be used analogously to the GraphX API.</li>\n<li><code>joins</code>: Join message aggregates with the original graph. GraphFrames rely on DataFrame joins, which provide the full functionality of GraphX joins.</li>\n</ul>\n<p>The below code snippets show how to use aggregateMessages to compute the sum of the ages of adjacent users.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696313_1377113489","id":"paragraph_1661081386746_1436254203","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:43:48+0300","dateFinished":"2023-10-23T11:43:48+0300","status":"FINISHED","$$hashKey":"object:13844"},{"text":"import org.graphframes.lib.AggregateMessages\n\n// We will use AggregateMessages utilities later, so name it \"AM\" for short.\nval AM = AggregateMessages\n\n// For each user, sum the ages of the adjacent users.\nval msgToSrc = AM.dst(\"age\")\nval msgToDst = AM.src(\"age\")\nval agg = { g.aggregateMessages\n  .sendToSrc(msgToSrc)  // send destination user's age to source\n  .sendToDst(msgToDst)  // send source user's age to destination\n  .agg(sum(AM.msg).as(\"summedAges\")) } // sum up ages, stored in AM.msg column\nagg.show()","user":"anonymous","dateUpdated":"Oct 23, 2023, 11:54:45 AM","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----------+\n| id|summedAges|\n+---+----------+\n|  a|        97|\n|  b|        94|\n|  c|       108|\n|  f|        62|\n|  e|        99|\n|  d|        66|\n+---+----------+\n\nimport org.graphframes.lib.AggregateMessages\n\u001b[1m\u001b[34mAM\u001b[0m: \u001b[1m\u001b[32morg.graphframes.lib.AggregateMessages.type\u001b[0m = org.graphframes.lib.AggregateMessages$@245a6107\n\u001b[1m\u001b[34mmsgToSrc\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Column\u001b[0m = dst[age]\n\u001b[1m\u001b[34mmsgToDst\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Column\u001b[0m = src[age]\n\u001b[1m\u001b[34magg\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: string, summedAges: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://ubuntu:4040/jobs/job?id=1548"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1549"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1550"},{"jobUrl":"http://ubuntu:4040/jobs/job?id=1551"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696313_768790150","id":"paragraph_1661081416662_1031733959","dateCreated":"Oct 23, 2023, 10:54:56 AM","dateStarted":"Oct 23, 2023, 11:54:45 AM","dateFinished":"Oct 23, 2023, 11:54:46 AM","status":"FINISHED","$$hashKey":"object:13845"},{"text":"%md\nFor a more complex example, look at the code used to implement the [Belief Propagation example](https://github.com/graphframes/graphframes/blob/master/src/main/scala/org/graphframes/examples/BeliefPropagation.scala).","user":"anonymous","dateUpdated":"2023-10-23T11:44:03+0300","progress":0,"config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>For a more complex example, look at the code used to implement the <a href=\"https://github.com/graphframes/graphframes/blob/master/src/main/scala/org/graphframes/examples/BeliefPropagation.scala\">Belief Propagation example</a>.</p>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696313_636562711","id":"paragraph_1661081424829_1945933151","dateCreated":"2023-10-23T10:54:56+0300","dateStarted":"2023-10-23T11:44:03+0300","dateFinished":"2023-10-23T11:44:03+0300","status":"FINISHED","$$hashKey":"object:13846"},{"text":"","user":"anonymous","dateUpdated":"2023-10-23T10:55:16+0300","progress":0,"config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1698047696313_760023263","id":"paragraph_1661082217997_1201650067","dateCreated":"2023-10-23T10:54:56+0300","status":"FINISHED","$$hashKey":"object:13847"}],"info":{},"noteForms":{},"noteParams":{},"angularObjects":{}}